
SmartCage.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b30  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000064  00800060  00000b30  00000bc4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001a  008000c4  008000c4  00000c28  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c28  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000c58  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e8  00000000  00000000  00000c94  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001ea6  00000000  00000000  00000e7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b3b  00000000  00000000  00002d22  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001072  00000000  00000000  0000385d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004ec  00000000  00000000  000048d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007ce  00000000  00000000  00004dbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000012c7  00000000  00000000  0000558a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000188  00000000  00000000  00006851  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 90 01 	jmp	0x320	; 0x320 <__vector_1>
   8:	0c 94 b9 01 	jmp	0x372	; 0x372 <__vector_2>
   c:	0c 94 e2 01 	jmp	0x3c4	; 0x3c4 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 10 04 	jmp	0x820	; 0x820 <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 8c 03 	jmp	0x718	; 0x718 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e3       	ldi	r30, 0x30	; 48
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 3c       	cpi	r26, 0xC4	; 196
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 ec       	ldi	r26, 0xC4	; 196
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 3d       	cpi	r26, 0xDE	; 222
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 1c 05 	call	0xa38	; 0xa38 <main>
  8a:	0c 94 96 05 	jmp	0xb2c	; 0xb2c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_VidSetPinDirection>:
	switch(port)
	{
		case 0: PORTA=Value; break;
		case 1: PORTB=Value; break;
		case 2: PORTC=Value; break;
		case 3: PORTD=Value; break;
  92:	41 30       	cpi	r20, 0x01	; 1
  94:	a1 f5       	brne	.+104    	; 0xfe <DIO_VidSetPinDirection+0x6c>
  96:	81 30       	cpi	r24, 0x01	; 1
  98:	89 f0       	breq	.+34     	; 0xbc <DIO_VidSetPinDirection+0x2a>
  9a:	28 f0       	brcs	.+10     	; 0xa6 <DIO_VidSetPinDirection+0x14>
  9c:	82 30       	cpi	r24, 0x02	; 2
  9e:	c9 f0       	breq	.+50     	; 0xd2 <DIO_VidSetPinDirection+0x40>
  a0:	83 30       	cpi	r24, 0x03	; 3
  a2:	11 f1       	breq	.+68     	; 0xe8 <DIO_VidSetPinDirection+0x56>
  a4:	08 95       	ret
  a6:	81 e0       	ldi	r24, 0x01	; 1
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	02 c0       	rjmp	.+4      	; 0xb0 <DIO_VidSetPinDirection+0x1e>
  ac:	88 0f       	add	r24, r24
  ae:	99 1f       	adc	r25, r25
  b0:	6a 95       	dec	r22
  b2:	e2 f7       	brpl	.-8      	; 0xac <DIO_VidSetPinDirection+0x1a>
  b4:	9a b3       	in	r25, 0x1a	; 26
  b6:	89 2b       	or	r24, r25
  b8:	8a bb       	out	0x1a, r24	; 26
  ba:	08 95       	ret
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	02 c0       	rjmp	.+4      	; 0xc6 <DIO_VidSetPinDirection+0x34>
  c2:	88 0f       	add	r24, r24
  c4:	99 1f       	adc	r25, r25
  c6:	6a 95       	dec	r22
  c8:	e2 f7       	brpl	.-8      	; 0xc2 <DIO_VidSetPinDirection+0x30>
  ca:	97 b3       	in	r25, 0x17	; 23
  cc:	89 2b       	or	r24, r25
  ce:	87 bb       	out	0x17, r24	; 23
  d0:	08 95       	ret
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	02 c0       	rjmp	.+4      	; 0xdc <DIO_VidSetPinDirection+0x4a>
  d8:	88 0f       	add	r24, r24
  da:	99 1f       	adc	r25, r25
  dc:	6a 95       	dec	r22
  de:	e2 f7       	brpl	.-8      	; 0xd8 <DIO_VidSetPinDirection+0x46>
  e0:	94 b3       	in	r25, 0x14	; 20
  e2:	89 2b       	or	r24, r25
  e4:	84 bb       	out	0x14, r24	; 20
  e6:	08 95       	ret
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <DIO_VidSetPinDirection+0x60>
  ee:	88 0f       	add	r24, r24
  f0:	99 1f       	adc	r25, r25
  f2:	6a 95       	dec	r22
  f4:	e2 f7       	brpl	.-8      	; 0xee <DIO_VidSetPinDirection+0x5c>
  f6:	91 b3       	in	r25, 0x11	; 17
  f8:	89 2b       	or	r24, r25
  fa:	81 bb       	out	0x11, r24	; 17
  fc:	08 95       	ret
  fe:	41 11       	cpse	r20, r1
 100:	37 c0       	rjmp	.+110    	; 0x170 <DIO_VidSetPinDirection+0xde>
 102:	81 30       	cpi	r24, 0x01	; 1
 104:	91 f0       	breq	.+36     	; 0x12a <DIO_VidSetPinDirection+0x98>
 106:	28 f0       	brcs	.+10     	; 0x112 <DIO_VidSetPinDirection+0x80>
 108:	82 30       	cpi	r24, 0x02	; 2
 10a:	d9 f0       	breq	.+54     	; 0x142 <DIO_VidSetPinDirection+0xb0>
 10c:	83 30       	cpi	r24, 0x03	; 3
 10e:	29 f1       	breq	.+74     	; 0x15a <DIO_VidSetPinDirection+0xc8>
 110:	08 95       	ret
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	02 c0       	rjmp	.+4      	; 0x11c <DIO_VidSetPinDirection+0x8a>
 118:	88 0f       	add	r24, r24
 11a:	99 1f       	adc	r25, r25
 11c:	6a 95       	dec	r22
 11e:	e2 f7       	brpl	.-8      	; 0x118 <DIO_VidSetPinDirection+0x86>
 120:	80 95       	com	r24
 122:	9a b3       	in	r25, 0x1a	; 26
 124:	89 23       	and	r24, r25
 126:	8a bb       	out	0x1a, r24	; 26
 128:	08 95       	ret
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	02 c0       	rjmp	.+4      	; 0x134 <DIO_VidSetPinDirection+0xa2>
 130:	88 0f       	add	r24, r24
 132:	99 1f       	adc	r25, r25
 134:	6a 95       	dec	r22
 136:	e2 f7       	brpl	.-8      	; 0x130 <DIO_VidSetPinDirection+0x9e>
 138:	80 95       	com	r24
 13a:	97 b3       	in	r25, 0x17	; 23
 13c:	89 23       	and	r24, r25
 13e:	87 bb       	out	0x17, r24	; 23
 140:	08 95       	ret
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	02 c0       	rjmp	.+4      	; 0x14c <DIO_VidSetPinDirection+0xba>
 148:	88 0f       	add	r24, r24
 14a:	99 1f       	adc	r25, r25
 14c:	6a 95       	dec	r22
 14e:	e2 f7       	brpl	.-8      	; 0x148 <DIO_VidSetPinDirection+0xb6>
 150:	80 95       	com	r24
 152:	94 b3       	in	r25, 0x14	; 20
 154:	89 23       	and	r24, r25
 156:	84 bb       	out	0x14, r24	; 20
 158:	08 95       	ret
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	02 c0       	rjmp	.+4      	; 0x164 <DIO_VidSetPinDirection+0xd2>
 160:	88 0f       	add	r24, r24
 162:	99 1f       	adc	r25, r25
 164:	6a 95       	dec	r22
 166:	e2 f7       	brpl	.-8      	; 0x160 <DIO_VidSetPinDirection+0xce>
 168:	80 95       	com	r24
 16a:	91 b3       	in	r25, 0x11	; 17
 16c:	89 23       	and	r24, r25
 16e:	81 bb       	out	0x11, r24	; 17
 170:	08 95       	ret

00000172 <DIO_VidSetPinValue>:
 172:	41 30       	cpi	r20, 0x01	; 1
 174:	a1 f5       	brne	.+104    	; 0x1de <DIO_VidSetPinValue+0x6c>
 176:	81 30       	cpi	r24, 0x01	; 1
 178:	89 f0       	breq	.+34     	; 0x19c <DIO_VidSetPinValue+0x2a>
 17a:	28 f0       	brcs	.+10     	; 0x186 <DIO_VidSetPinValue+0x14>
 17c:	82 30       	cpi	r24, 0x02	; 2
 17e:	c9 f0       	breq	.+50     	; 0x1b2 <DIO_VidSetPinValue+0x40>
 180:	83 30       	cpi	r24, 0x03	; 3
 182:	11 f1       	breq	.+68     	; 0x1c8 <DIO_VidSetPinValue+0x56>
 184:	08 95       	ret
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	02 c0       	rjmp	.+4      	; 0x190 <DIO_VidSetPinValue+0x1e>
 18c:	88 0f       	add	r24, r24
 18e:	99 1f       	adc	r25, r25
 190:	6a 95       	dec	r22
 192:	e2 f7       	brpl	.-8      	; 0x18c <DIO_VidSetPinValue+0x1a>
 194:	9b b3       	in	r25, 0x1b	; 27
 196:	89 2b       	or	r24, r25
 198:	8b bb       	out	0x1b, r24	; 27
 19a:	08 95       	ret
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <DIO_VidSetPinValue+0x34>
 1a2:	88 0f       	add	r24, r24
 1a4:	99 1f       	adc	r25, r25
 1a6:	6a 95       	dec	r22
 1a8:	e2 f7       	brpl	.-8      	; 0x1a2 <DIO_VidSetPinValue+0x30>
 1aa:	98 b3       	in	r25, 0x18	; 24
 1ac:	89 2b       	or	r24, r25
 1ae:	88 bb       	out	0x18, r24	; 24
 1b0:	08 95       	ret
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	02 c0       	rjmp	.+4      	; 0x1bc <DIO_VidSetPinValue+0x4a>
 1b8:	88 0f       	add	r24, r24
 1ba:	99 1f       	adc	r25, r25
 1bc:	6a 95       	dec	r22
 1be:	e2 f7       	brpl	.-8      	; 0x1b8 <DIO_VidSetPinValue+0x46>
 1c0:	95 b3       	in	r25, 0x15	; 21
 1c2:	89 2b       	or	r24, r25
 1c4:	85 bb       	out	0x15, r24	; 21
 1c6:	08 95       	ret
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <DIO_VidSetPinValue+0x60>
 1ce:	88 0f       	add	r24, r24
 1d0:	99 1f       	adc	r25, r25
 1d2:	6a 95       	dec	r22
 1d4:	e2 f7       	brpl	.-8      	; 0x1ce <DIO_VidSetPinValue+0x5c>
 1d6:	92 b3       	in	r25, 0x12	; 18
 1d8:	89 2b       	or	r24, r25
 1da:	82 bb       	out	0x12, r24	; 18
 1dc:	08 95       	ret
 1de:	41 11       	cpse	r20, r1
 1e0:	37 c0       	rjmp	.+110    	; 0x250 <DIO_VidSetPinValue+0xde>
 1e2:	81 30       	cpi	r24, 0x01	; 1
 1e4:	91 f0       	breq	.+36     	; 0x20a <DIO_VidSetPinValue+0x98>
 1e6:	28 f0       	brcs	.+10     	; 0x1f2 <DIO_VidSetPinValue+0x80>
 1e8:	82 30       	cpi	r24, 0x02	; 2
 1ea:	d9 f0       	breq	.+54     	; 0x222 <DIO_VidSetPinValue+0xb0>
 1ec:	83 30       	cpi	r24, 0x03	; 3
 1ee:	29 f1       	breq	.+74     	; 0x23a <DIO_VidSetPinValue+0xc8>
 1f0:	08 95       	ret
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	02 c0       	rjmp	.+4      	; 0x1fc <DIO_VidSetPinValue+0x8a>
 1f8:	88 0f       	add	r24, r24
 1fa:	99 1f       	adc	r25, r25
 1fc:	6a 95       	dec	r22
 1fe:	e2 f7       	brpl	.-8      	; 0x1f8 <DIO_VidSetPinValue+0x86>
 200:	80 95       	com	r24
 202:	9b b3       	in	r25, 0x1b	; 27
 204:	89 23       	and	r24, r25
 206:	8b bb       	out	0x1b, r24	; 27
 208:	08 95       	ret
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	02 c0       	rjmp	.+4      	; 0x214 <DIO_VidSetPinValue+0xa2>
 210:	88 0f       	add	r24, r24
 212:	99 1f       	adc	r25, r25
 214:	6a 95       	dec	r22
 216:	e2 f7       	brpl	.-8      	; 0x210 <DIO_VidSetPinValue+0x9e>
 218:	80 95       	com	r24
 21a:	98 b3       	in	r25, 0x18	; 24
 21c:	89 23       	and	r24, r25
 21e:	88 bb       	out	0x18, r24	; 24
 220:	08 95       	ret
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	02 c0       	rjmp	.+4      	; 0x22c <DIO_VidSetPinValue+0xba>
 228:	88 0f       	add	r24, r24
 22a:	99 1f       	adc	r25, r25
 22c:	6a 95       	dec	r22
 22e:	e2 f7       	brpl	.-8      	; 0x228 <DIO_VidSetPinValue+0xb6>
 230:	80 95       	com	r24
 232:	95 b3       	in	r25, 0x15	; 21
 234:	89 23       	and	r24, r25
 236:	85 bb       	out	0x15, r24	; 21
 238:	08 95       	ret
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	02 c0       	rjmp	.+4      	; 0x244 <DIO_VidSetPinValue+0xd2>
 240:	88 0f       	add	r24, r24
 242:	99 1f       	adc	r25, r25
 244:	6a 95       	dec	r22
 246:	e2 f7       	brpl	.-8      	; 0x240 <DIO_VidSetPinValue+0xce>
 248:	80 95       	com	r24
 24a:	92 b3       	in	r25, 0x12	; 18
 24c:	89 23       	and	r24, r25
 24e:	82 bb       	out	0x12, r24	; 18
 250:	08 95       	ret

00000252 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 port,u8 pin_Num)
{
	u8 u8Result;
	
	switch (port)
 252:	81 30       	cpi	r24, 0x01	; 1
 254:	81 f0       	breq	.+32     	; 0x276 <DIO_u8GetPinValue+0x24>
 256:	28 f0       	brcs	.+10     	; 0x262 <DIO_u8GetPinValue+0x10>
 258:	82 30       	cpi	r24, 0x02	; 2
 25a:	b9 f0       	breq	.+46     	; 0x28a <DIO_u8GetPinValue+0x38>
 25c:	83 30       	cpi	r24, 0x03	; 3
 25e:	f9 f0       	breq	.+62     	; 0x29e <DIO_u8GetPinValue+0x4c>
 260:	27 c0       	rjmp	.+78     	; 0x2b0 <DIO_u8GetPinValue+0x5e>
	 {
		case 0: u8Result= GET_BIT(PINA,pin_Num); break;
 262:	89 b3       	in	r24, 0x19	; 25
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	02 c0       	rjmp	.+4      	; 0x26c <DIO_u8GetPinValue+0x1a>
 268:	95 95       	asr	r25
 26a:	87 95       	ror	r24
 26c:	6a 95       	dec	r22
 26e:	e2 f7       	brpl	.-8      	; 0x268 <DIO_u8GetPinValue+0x16>
 270:	98 2f       	mov	r25, r24
 272:	91 70       	andi	r25, 0x01	; 1
 274:	1d c0       	rjmp	.+58     	; 0x2b0 <DIO_u8GetPinValue+0x5e>
		case 1: u8Result= GET_BIT(PINB,pin_Num); break;
 276:	86 b3       	in	r24, 0x16	; 22
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	02 c0       	rjmp	.+4      	; 0x280 <DIO_u8GetPinValue+0x2e>
 27c:	95 95       	asr	r25
 27e:	87 95       	ror	r24
 280:	6a 95       	dec	r22
 282:	e2 f7       	brpl	.-8      	; 0x27c <DIO_u8GetPinValue+0x2a>
 284:	98 2f       	mov	r25, r24
 286:	91 70       	andi	r25, 0x01	; 1
 288:	13 c0       	rjmp	.+38     	; 0x2b0 <DIO_u8GetPinValue+0x5e>
		case 2: u8Result= GET_BIT(PINC,pin_Num); break;
 28a:	83 b3       	in	r24, 0x13	; 19
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	02 c0       	rjmp	.+4      	; 0x294 <DIO_u8GetPinValue+0x42>
 290:	95 95       	asr	r25
 292:	87 95       	ror	r24
 294:	6a 95       	dec	r22
 296:	e2 f7       	brpl	.-8      	; 0x290 <DIO_u8GetPinValue+0x3e>
 298:	98 2f       	mov	r25, r24
 29a:	91 70       	andi	r25, 0x01	; 1
 29c:	09 c0       	rjmp	.+18     	; 0x2b0 <DIO_u8GetPinValue+0x5e>
		case 3: u8Result= GET_BIT(PIND,pin_Num); break;
 29e:	80 b3       	in	r24, 0x10	; 16
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	02 c0       	rjmp	.+4      	; 0x2a8 <DIO_u8GetPinValue+0x56>
 2a4:	95 95       	asr	r25
 2a6:	87 95       	ror	r24
 2a8:	6a 95       	dec	r22
 2aa:	e2 f7       	brpl	.-8      	; 0x2a4 <DIO_u8GetPinValue+0x52>
 2ac:	98 2f       	mov	r25, r24
 2ae:	91 70       	andi	r25, 0x01	; 1
		default:                                 break;
	 }
	 return u8Result;
}
 2b0:	89 2f       	mov	r24, r25
 2b2:	08 95       	ret

000002b4 <EXIT0_VidInit>:
	SET_BIT(SREG,GIE);
}

void GIE_VidDisable(void)
{
	 CLR_BIT(SREG,GIE);
 2b4:	8f b7       	in	r24, 0x3f	; 63
 2b6:	80 68       	ori	r24, 0x80	; 128
 2b8:	8f bf       	out	0x3f, r24	; 63
 2ba:	85 b7       	in	r24, 0x35	; 53
 2bc:	81 60       	ori	r24, 0x01	; 1
 2be:	85 bf       	out	0x35, r24	; 53
 2c0:	85 b7       	in	r24, 0x35	; 53
 2c2:	82 60       	ori	r24, 0x02	; 2
 2c4:	85 bf       	out	0x35, r24	; 53
 2c6:	8b b7       	in	r24, 0x3b	; 59
 2c8:	80 64       	ori	r24, 0x40	; 64
 2ca:	8b bf       	out	0x3b, r24	; 59
 2cc:	08 95       	ret

000002ce <EXIT1_VidInit>:
 2ce:	8f b7       	in	r24, 0x3f	; 63
 2d0:	80 68       	ori	r24, 0x80	; 128
 2d2:	8f bf       	out	0x3f, r24	; 63
 2d4:	85 b7       	in	r24, 0x35	; 53
 2d6:	88 60       	ori	r24, 0x08	; 8
 2d8:	85 bf       	out	0x35, r24	; 53
 2da:	85 b7       	in	r24, 0x35	; 53
 2dc:	84 60       	ori	r24, 0x04	; 4
 2de:	85 bf       	out	0x35, r24	; 53
 2e0:	8b b7       	in	r24, 0x3b	; 59
 2e2:	80 68       	ori	r24, 0x80	; 128
 2e4:	8b bf       	out	0x3b, r24	; 59
 2e6:	08 95       	ret

000002e8 <EXIT2_VidInit>:
 2e8:	8f b7       	in	r24, 0x3f	; 63
 2ea:	80 68       	ori	r24, 0x80	; 128
 2ec:	8f bf       	out	0x3f, r24	; 63
 2ee:	84 b7       	in	r24, 0x34	; 52
 2f0:	80 64       	ori	r24, 0x40	; 64
 2f2:	84 bf       	out	0x34, r24	; 52
 2f4:	8b b7       	in	r24, 0x3b	; 59
 2f6:	8f 7d       	andi	r24, 0xDF	; 223
 2f8:	8b bf       	out	0x3b, r24	; 59
 2fa:	8b b7       	in	r24, 0x3b	; 59
 2fc:	80 62       	ori	r24, 0x20	; 32
 2fe:	8b bf       	out	0x3b, r24	; 59
 300:	08 95       	ret

00000302 <EXIT0_VoidSetCallBack>:
}


void EXIT0_VoidSetCallBack(void (*Ptr0)(void))
{
	EXIT0_PVidCallBack = Ptr0;
 302:	90 93 c9 00 	sts	0x00C9, r25	; 0x8000c9 <EXIT0_PVidCallBack+0x1>
 306:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <EXIT0_PVidCallBack>
 30a:	08 95       	ret

0000030c <EXIT1_VoidSetCallBack>:
}

void EXIT1_VoidSetCallBack(void (*Ptr1)(void))
{
	EXIT1_PVidCallBack = Ptr1;
 30c:	90 93 c7 00 	sts	0x00C7, r25	; 0x8000c7 <EXIT1_PVidCallBack+0x1>
 310:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <EXIT1_PVidCallBack>
 314:	08 95       	ret

00000316 <EXIT2_VoidSetCallBack>:
}
void EXIT2_VoidSetCallBack(void (*Ptr2)(void))
{
	EXIT2_PVidCallBack = Ptr2;
 316:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__data_end+0x1>
 31a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__data_end>
 31e:	08 95       	ret

00000320 <__vector_1>:


//INT0 VECTOR 
//All vector number in table are subtracted by 1
void __vector_1(void)
{
 320:	1f 92       	push	r1
 322:	0f 92       	push	r0
 324:	0f b6       	in	r0, 0x3f	; 63
 326:	0f 92       	push	r0
 328:	11 24       	eor	r1, r1
 32a:	2f 93       	push	r18
 32c:	3f 93       	push	r19
 32e:	4f 93       	push	r20
 330:	5f 93       	push	r21
 332:	6f 93       	push	r22
 334:	7f 93       	push	r23
 336:	8f 93       	push	r24
 338:	9f 93       	push	r25
 33a:	af 93       	push	r26
 33c:	bf 93       	push	r27
 33e:	ef 93       	push	r30
 340:	ff 93       	push	r31
	if(EXIT0_PVidCallBack != NULL)
 342:	e0 91 c8 00 	lds	r30, 0x00C8	; 0x8000c8 <EXIT0_PVidCallBack>
 346:	f0 91 c9 00 	lds	r31, 0x00C9	; 0x8000c9 <EXIT0_PVidCallBack+0x1>
 34a:	30 97       	sbiw	r30, 0x00	; 0
 34c:	09 f0       	breq	.+2      	; 0x350 <__vector_1+0x30>
		EXIT0_PVidCallBack();
 34e:	09 95       	icall
	//what we want the interrupt to do 
}
 350:	ff 91       	pop	r31
 352:	ef 91       	pop	r30
 354:	bf 91       	pop	r27
 356:	af 91       	pop	r26
 358:	9f 91       	pop	r25
 35a:	8f 91       	pop	r24
 35c:	7f 91       	pop	r23
 35e:	6f 91       	pop	r22
 360:	5f 91       	pop	r21
 362:	4f 91       	pop	r20
 364:	3f 91       	pop	r19
 366:	2f 91       	pop	r18
 368:	0f 90       	pop	r0
 36a:	0f be       	out	0x3f, r0	; 63
 36c:	0f 90       	pop	r0
 36e:	1f 90       	pop	r1
 370:	18 95       	reti

00000372 <__vector_2>:
//INT1 VECTOR
void __vector_2(void)
{
 372:	1f 92       	push	r1
 374:	0f 92       	push	r0
 376:	0f b6       	in	r0, 0x3f	; 63
 378:	0f 92       	push	r0
 37a:	11 24       	eor	r1, r1
 37c:	2f 93       	push	r18
 37e:	3f 93       	push	r19
 380:	4f 93       	push	r20
 382:	5f 93       	push	r21
 384:	6f 93       	push	r22
 386:	7f 93       	push	r23
 388:	8f 93       	push	r24
 38a:	9f 93       	push	r25
 38c:	af 93       	push	r26
 38e:	bf 93       	push	r27
 390:	ef 93       	push	r30
 392:	ff 93       	push	r31
	if(EXIT1_PVidCallBack != NULL)
 394:	e0 91 c6 00 	lds	r30, 0x00C6	; 0x8000c6 <EXIT1_PVidCallBack>
 398:	f0 91 c7 00 	lds	r31, 0x00C7	; 0x8000c7 <EXIT1_PVidCallBack+0x1>
 39c:	30 97       	sbiw	r30, 0x00	; 0
 39e:	09 f0       	breq	.+2      	; 0x3a2 <__vector_2+0x30>
		EXIT1_PVidCallBack();
 3a0:	09 95       	icall
	
}
 3a2:	ff 91       	pop	r31
 3a4:	ef 91       	pop	r30
 3a6:	bf 91       	pop	r27
 3a8:	af 91       	pop	r26
 3aa:	9f 91       	pop	r25
 3ac:	8f 91       	pop	r24
 3ae:	7f 91       	pop	r23
 3b0:	6f 91       	pop	r22
 3b2:	5f 91       	pop	r21
 3b4:	4f 91       	pop	r20
 3b6:	3f 91       	pop	r19
 3b8:	2f 91       	pop	r18
 3ba:	0f 90       	pop	r0
 3bc:	0f be       	out	0x3f, r0	; 63
 3be:	0f 90       	pop	r0
 3c0:	1f 90       	pop	r1
 3c2:	18 95       	reti

000003c4 <__vector_3>:

void __vector_3(void)
{
 3c4:	1f 92       	push	r1
 3c6:	0f 92       	push	r0
 3c8:	0f b6       	in	r0, 0x3f	; 63
 3ca:	0f 92       	push	r0
 3cc:	11 24       	eor	r1, r1
 3ce:	2f 93       	push	r18
 3d0:	3f 93       	push	r19
 3d2:	4f 93       	push	r20
 3d4:	5f 93       	push	r21
 3d6:	6f 93       	push	r22
 3d8:	7f 93       	push	r23
 3da:	8f 93       	push	r24
 3dc:	9f 93       	push	r25
 3de:	af 93       	push	r26
 3e0:	bf 93       	push	r27
 3e2:	ef 93       	push	r30
 3e4:	ff 93       	push	r31
	if(EXIT2_PVidCallBack != NULL)
 3e6:	e0 91 c4 00 	lds	r30, 0x00C4	; 0x8000c4 <__data_end>
 3ea:	f0 91 c5 00 	lds	r31, 0x00C5	; 0x8000c5 <__data_end+0x1>
 3ee:	30 97       	sbiw	r30, 0x00	; 0
 3f0:	09 f0       	breq	.+2      	; 0x3f4 <__vector_3+0x30>
		EXIT2_PVidCallBack();
 3f2:	09 95       	icall
	CLR_BIT(GIFR,INTF2);
 3f4:	8a b7       	in	r24, 0x3a	; 58
 3f6:	8f 7d       	andi	r24, 0xDF	; 223
 3f8:	8a bf       	out	0x3a, r24	; 58
}
 3fa:	ff 91       	pop	r31
 3fc:	ef 91       	pop	r30
 3fe:	bf 91       	pop	r27
 400:	af 91       	pop	r26
 402:	9f 91       	pop	r25
 404:	8f 91       	pop	r24
 406:	7f 91       	pop	r23
 408:	6f 91       	pop	r22
 40a:	5f 91       	pop	r21
 40c:	4f 91       	pop	r20
 40e:	3f 91       	pop	r19
 410:	2f 91       	pop	r18
 412:	0f 90       	pop	r0
 414:	0f be       	out	0x3f, r0	; 63
 416:	0f 90       	pop	r0
 418:	1f 90       	pop	r1
 41a:	18 95       	reti

0000041c <LCDBusyLoop>:
		LCDData(ch);
	}
	msg++;
	ch=pgm_read_byte(msg);
 }
}
 41c:	8a b3       	in	r24, 0x1a	; 26
 41e:	87 78       	andi	r24, 0x87	; 135
 420:	8a bb       	out	0x1a, r24	; 26
 422:	d8 9a       	sbi	0x1b, 0	; 27
 424:	d9 98       	cbi	0x1b, 1	; 27
 426:	82 e0       	ldi	r24, 0x02	; 2
 428:	8a 95       	dec	r24
 42a:	f1 f7       	brne	.-4      	; 0x428 <LCDBusyLoop+0xc>
 42c:	00 c0       	rjmp	.+0      	; 0x42e <LCDBusyLoop+0x12>
 42e:	da 9a       	sbi	0x1b, 2	; 27
 430:	92 e0       	ldi	r25, 0x02	; 2
 432:	9a 95       	dec	r25
 434:	f1 f7       	brne	.-4      	; 0x432 <LCDBusyLoop+0x16>
 436:	00 c0       	rjmp	.+0      	; 0x438 <LCDBusyLoop+0x1c>
 438:	89 b3       	in	r24, 0x19	; 25
 43a:	86 95       	lsr	r24
 43c:	86 95       	lsr	r24
 43e:	86 95       	lsr	r24
 440:	82 95       	swap	r24
 442:	80 7f       	andi	r24, 0xF0	; 240
 444:	92 e0       	ldi	r25, 0x02	; 2
 446:	9a 95       	dec	r25
 448:	f1 f7       	brne	.-4      	; 0x446 <LCDBusyLoop+0x2a>
 44a:	00 c0       	rjmp	.+0      	; 0x44c <LCDBusyLoop+0x30>
 44c:	da 98       	cbi	0x1b, 2	; 27
 44e:	95 e0       	ldi	r25, 0x05	; 5
 450:	9a 95       	dec	r25
 452:	f1 f7       	brne	.-4      	; 0x450 <LCDBusyLoop+0x34>
 454:	00 00       	nop
 456:	da 9a       	sbi	0x1b, 2	; 27
 458:	92 e0       	ldi	r25, 0x02	; 2
 45a:	9a 95       	dec	r25
 45c:	f1 f7       	brne	.-4      	; 0x45a <LCDBusyLoop+0x3e>
 45e:	00 c0       	rjmp	.+0      	; 0x460 <LCDBusyLoop+0x44>
 460:	99 b3       	in	r25, 0x19	; 25
 462:	92 e0       	ldi	r25, 0x02	; 2
 464:	9a 95       	dec	r25
 466:	f1 f7       	brne	.-4      	; 0x464 <LCDBusyLoop+0x48>
 468:	00 c0       	rjmp	.+0      	; 0x46a <LCDBusyLoop+0x4e>
 46a:	da 98       	cbi	0x1b, 2	; 27
 46c:	95 e0       	ldi	r25, 0x05	; 5
 46e:	9a 95       	dec	r25
 470:	f1 f7       	brne	.-4      	; 0x46e <LCDBusyLoop+0x52>
 472:	00 00       	nop
 474:	88 23       	and	r24, r24
 476:	dc f2       	brlt	.-74     	; 0x42e <LCDBusyLoop+0x12>
 478:	d8 98       	cbi	0x1b, 0	; 27
 47a:	8a b3       	in	r24, 0x1a	; 26
 47c:	88 67       	ori	r24, 0x78	; 120
 47e:	8a bb       	out	0x1a, r24	; 26
 480:	08 95       	ret

00000482 <LCDByte>:
 482:	98 2f       	mov	r25, r24
 484:	92 95       	swap	r25
 486:	9f 70       	andi	r25, 0x0F	; 15
 488:	8f 70       	andi	r24, 0x0F	; 15
 48a:	61 11       	cpse	r22, r1
 48c:	02 c0       	rjmp	.+4      	; 0x492 <LCDByte+0x10>
 48e:	d9 98       	cbi	0x1b, 1	; 27
 490:	01 c0       	rjmp	.+2      	; 0x494 <LCDByte+0x12>
 492:	d9 9a       	sbi	0x1b, 1	; 27
 494:	22 e0       	ldi	r18, 0x02	; 2
 496:	2a 95       	dec	r18
 498:	f1 f7       	brne	.-4      	; 0x496 <LCDByte+0x14>
 49a:	00 c0       	rjmp	.+0      	; 0x49c <LCDByte+0x1a>
 49c:	da 9a       	sbi	0x1b, 2	; 27
 49e:	2b b3       	in	r18, 0x1b	; 27
 4a0:	27 78       	andi	r18, 0x87	; 135
 4a2:	99 0f       	add	r25, r25
 4a4:	99 0f       	add	r25, r25
 4a6:	99 0f       	add	r25, r25
 4a8:	92 2b       	or	r25, r18
 4aa:	9b bb       	out	0x1b, r25	; 27
 4ac:	95 e0       	ldi	r25, 0x05	; 5
 4ae:	9a 95       	dec	r25
 4b0:	f1 f7       	brne	.-4      	; 0x4ae <LCDByte+0x2c>
 4b2:	00 00       	nop
 4b4:	da 98       	cbi	0x1b, 2	; 27
 4b6:	25 e0       	ldi	r18, 0x05	; 5
 4b8:	2a 95       	dec	r18
 4ba:	f1 f7       	brne	.-4      	; 0x4b8 <LCDByte+0x36>
 4bc:	00 00       	nop
 4be:	da 9a       	sbi	0x1b, 2	; 27
 4c0:	9b b3       	in	r25, 0x1b	; 27
 4c2:	97 78       	andi	r25, 0x87	; 135
 4c4:	88 0f       	add	r24, r24
 4c6:	88 0f       	add	r24, r24
 4c8:	88 0f       	add	r24, r24
 4ca:	89 2b       	or	r24, r25
 4cc:	8b bb       	out	0x1b, r24	; 27
 4ce:	85 e0       	ldi	r24, 0x05	; 5
 4d0:	8a 95       	dec	r24
 4d2:	f1 f7       	brne	.-4      	; 0x4d0 <LCDByte+0x4e>
 4d4:	00 00       	nop
 4d6:	da 98       	cbi	0x1b, 2	; 27
 4d8:	95 e0       	ldi	r25, 0x05	; 5
 4da:	9a 95       	dec	r25
 4dc:	f1 f7       	brne	.-4      	; 0x4da <LCDByte+0x58>
 4de:	00 00       	nop
 4e0:	0e 94 0e 02 	call	0x41c	; 0x41c <LCDBusyLoop>
 4e4:	08 95       	ret

000004e6 <LCDInit>:
 4e6:	0f 93       	push	r16
 4e8:	1f 93       	push	r17
 4ea:	cf 93       	push	r28
 4ec:	df 93       	push	r29
 4ee:	c8 2f       	mov	r28, r24
 4f0:	2f ef       	ldi	r18, 0xFF	; 255
 4f2:	81 ee       	ldi	r24, 0xE1	; 225
 4f4:	94 e0       	ldi	r25, 0x04	; 4
 4f6:	21 50       	subi	r18, 0x01	; 1
 4f8:	80 40       	sbci	r24, 0x00	; 0
 4fa:	90 40       	sbci	r25, 0x00	; 0
 4fc:	e1 f7       	brne	.-8      	; 0x4f6 <LCDInit+0x10>
 4fe:	00 c0       	rjmp	.+0      	; 0x500 <LCDInit+0x1a>
 500:	00 00       	nop
 502:	8b b3       	in	r24, 0x1b	; 27
 504:	87 78       	andi	r24, 0x87	; 135
 506:	8b bb       	out	0x1b, r24	; 27
 508:	da 98       	cbi	0x1b, 2	; 27
 50a:	d8 98       	cbi	0x1b, 0	; 27
 50c:	d9 98       	cbi	0x1b, 1	; 27
 50e:	8a b3       	in	r24, 0x1a	; 26
 510:	88 67       	ori	r24, 0x78	; 120
 512:	8a bb       	out	0x1a, r24	; 26
 514:	d2 9a       	sbi	0x1a, 2	; 26
 516:	d1 9a       	sbi	0x1a, 1	; 26
 518:	d0 9a       	sbi	0x1a, 0	; 26
 51a:	00 c0       	rjmp	.+0      	; 0x51c <LCDInit+0x36>
 51c:	00 c0       	rjmp	.+0      	; 0x51e <LCDInit+0x38>
 51e:	00 00       	nop
 520:	da 9a       	sbi	0x1b, 2	; 27
 522:	dc 9a       	sbi	0x1b, 4	; 27
 524:	25 e0       	ldi	r18, 0x05	; 5
 526:	2a 95       	dec	r18
 528:	f1 f7       	brne	.-4      	; 0x526 <LCDInit+0x40>
 52a:	00 00       	nop
 52c:	da 98       	cbi	0x1b, 2	; 27
 52e:	85 e0       	ldi	r24, 0x05	; 5
 530:	8a 95       	dec	r24
 532:	f1 f7       	brne	.-4      	; 0x530 <LCDInit+0x4a>
 534:	00 00       	nop
 536:	8f ea       	ldi	r24, 0xAF	; 175
 538:	94 e0       	ldi	r25, 0x04	; 4
 53a:	01 97       	sbiw	r24, 0x01	; 1
 53c:	f1 f7       	brne	.-4      	; 0x53a <LCDInit+0x54>
 53e:	00 c0       	rjmp	.+0      	; 0x540 <LCDInit+0x5a>
 540:	00 00       	nop
 542:	60 e0       	ldi	r22, 0x00	; 0
 544:	88 e2       	ldi	r24, 0x28	; 40
 546:	0e 94 41 02 	call	0x482	; 0x482 <LCDByte>
 54a:	60 e0       	ldi	r22, 0x00	; 0
 54c:	8c 2f       	mov	r24, r28
 54e:	88 60       	ori	r24, 0x08	; 8
 550:	0e 94 41 02 	call	0x482	; 0x482 <LCDByte>
 554:	60 e0       	ldi	r22, 0x00	; 0
 556:	8c 2f       	mov	r24, r28
 558:	8c 60       	ori	r24, 0x0C	; 12
 55a:	0e 94 41 02 	call	0x482	; 0x482 <LCDByte>
 55e:	60 e0       	ldi	r22, 0x00	; 0
 560:	80 e4       	ldi	r24, 0x40	; 64
 562:	0e 94 41 02 	call	0x482	; 0x482 <LCDByte>
 566:	c0 e6       	ldi	r28, 0x60	; 96
 568:	d0 e0       	ldi	r29, 0x00	; 0
 56a:	00 ea       	ldi	r16, 0xA0	; 160
 56c:	10 e0       	ldi	r17, 0x00	; 0
 56e:	61 e0       	ldi	r22, 0x01	; 1
 570:	89 91       	ld	r24, Y+
 572:	0e 94 41 02 	call	0x482	; 0x482 <LCDByte>
 576:	c0 17       	cp	r28, r16
 578:	d1 07       	cpc	r29, r17
 57a:	c9 f7       	brne	.-14     	; 0x56e <LCDInit+0x88>
 57c:	60 e0       	ldi	r22, 0x00	; 0
 57e:	81 e0       	ldi	r24, 0x01	; 1
 580:	0e 94 41 02 	call	0x482	; 0x482 <LCDByte>
 584:	df 91       	pop	r29
 586:	cf 91       	pop	r28
 588:	1f 91       	pop	r17
 58a:	0f 91       	pop	r16
 58c:	08 95       	ret

0000058e <LCDWriteString>:
 58e:	0f 93       	push	r16
 590:	1f 93       	push	r17
 592:	cf 93       	push	r28
 594:	df 93       	push	r29
 596:	8c 01       	movw	r16, r24
 598:	fc 01       	movw	r30, r24
 59a:	80 81       	ld	r24, Z
 59c:	88 23       	and	r24, r24
 59e:	09 f1       	breq	.+66     	; 0x5e2 <LCDWriteString+0x54>
 5a0:	85 32       	cpi	r24, 0x25	; 37
 5a2:	a9 f4       	brne	.+42     	; 0x5ce <LCDWriteString+0x40>
 5a4:	e8 01       	movw	r28, r16
 5a6:	21 96       	adiw	r28, 0x01	; 1
 5a8:	f8 01       	movw	r30, r16
 5aa:	81 81       	ldd	r24, Z+1	; 0x01
 5ac:	80 53       	subi	r24, 0x30	; 48
 5ae:	88 30       	cpi	r24, 0x08	; 8
 5b0:	20 f4       	brcc	.+8      	; 0x5ba <LCDWriteString+0x2c>
 5b2:	61 e0       	ldi	r22, 0x01	; 1
 5b4:	0e 94 41 02 	call	0x482	; 0x482 <LCDByte>
 5b8:	0e c0       	rjmp	.+28     	; 0x5d6 <LCDWriteString+0x48>
 5ba:	61 e0       	ldi	r22, 0x01	; 1
 5bc:	85 e2       	ldi	r24, 0x25	; 37
 5be:	0e 94 41 02 	call	0x482	; 0x482 <LCDByte>
 5c2:	61 e0       	ldi	r22, 0x01	; 1
 5c4:	f8 01       	movw	r30, r16
 5c6:	81 81       	ldd	r24, Z+1	; 0x01
 5c8:	0e 94 41 02 	call	0x482	; 0x482 <LCDByte>
 5cc:	04 c0       	rjmp	.+8      	; 0x5d6 <LCDWriteString+0x48>
 5ce:	61 e0       	ldi	r22, 0x01	; 1
 5d0:	0e 94 41 02 	call	0x482	; 0x482 <LCDByte>
 5d4:	e8 01       	movw	r28, r16
 5d6:	8e 01       	movw	r16, r28
 5d8:	0f 5f       	subi	r16, 0xFF	; 255
 5da:	1f 4f       	sbci	r17, 0xFF	; 255
 5dc:	89 81       	ldd	r24, Y+1	; 0x01
 5de:	81 11       	cpse	r24, r1
 5e0:	df cf       	rjmp	.-66     	; 0x5a0 <LCDWriteString+0x12>
 5e2:	df 91       	pop	r29
 5e4:	cf 91       	pop	r28
 5e6:	1f 91       	pop	r17
 5e8:	0f 91       	pop	r16
 5ea:	08 95       	ret

000005ec <LCDWriteInt>:

void LCDWriteInt(int val,int8_t field_length)
{
 5ec:	ef 92       	push	r14
 5ee:	ff 92       	push	r15
 5f0:	0f 93       	push	r16
 5f2:	1f 93       	push	r17
 5f4:	cf 93       	push	r28
 5f6:	df 93       	push	r29
 5f8:	00 d0       	rcall	.+0      	; 0x5fa <LCDWriteInt+0xe>
 5fa:	00 d0       	rcall	.+0      	; 0x5fc <LCDWriteInt+0x10>
 5fc:	1f 92       	push	r1
 5fe:	cd b7       	in	r28, 0x3d	; 61
 600:	de b7       	in	r29, 0x3e	; 62
 602:	8c 01       	movw	r16, r24
 604:	f6 2e       	mov	r15, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
 606:	fe 01       	movw	r30, r28
 608:	31 96       	adiw	r30, 0x01	; 1
 60a:	85 e0       	ldi	r24, 0x05	; 5
 60c:	df 01       	movw	r26, r30
 60e:	1d 92       	st	X+, r1
 610:	8a 95       	dec	r24
 612:	e9 f7       	brne	.-6      	; 0x60e <LCDWriteInt+0x22>
	int i=4,j=0;
	
	//Handle negative integers
	if(val<0)
 614:	11 23       	and	r17, r17
 616:	44 f4       	brge	.+16     	; 0x628 <LCDWriteInt+0x3c>
	{
		LCDData('-');   //Write Negative sign
 618:	61 e0       	ldi	r22, 0x01	; 1
 61a:	8d e2       	ldi	r24, 0x2D	; 45
 61c:	0e 94 41 02 	call	0x482	; 0x482 <LCDByte>
		val=val*-1;     //convert to positive
 620:	11 95       	neg	r17
 622:	01 95       	neg	r16
 624:	11 09       	sbc	r17, r1
 626:	04 c0       	rjmp	.+8      	; 0x630 <LCDWriteInt+0x44>
	}
	else
	{
		LCDData(' ');
 628:	61 e0       	ldi	r22, 0x01	; 1
 62a:	80 e2       	ldi	r24, 0x20	; 32
 62c:	0e 94 41 02 	call	0x482	; 0x482 <LCDByte>
	}
	
	while(val)
 630:	01 15       	cp	r16, r1
 632:	11 05       	cpc	r17, r1
 634:	71 f0       	breq	.+28     	; 0x652 <LCDWriteInt+0x66>
 636:	fe 01       	movw	r30, r28
 638:	36 96       	adiw	r30, 0x06	; 6
	{
		str[i]=val%10;
 63a:	2a e0       	ldi	r18, 0x0A	; 10
 63c:	30 e0       	ldi	r19, 0x00	; 0
 63e:	c8 01       	movw	r24, r16
 640:	b9 01       	movw	r22, r18
 642:	0e 94 6e 05 	call	0xadc	; 0xadc <__divmodhi4>
 646:	82 93       	st	-Z, r24
		val=val/10;
 648:	06 2f       	mov	r16, r22
 64a:	17 2f       	mov	r17, r23
	else
	{
		LCDData(' ');
	}
	
	while(val)
 64c:	01 15       	cp	r16, r1
 64e:	11 05       	cpc	r17, r1
 650:	b1 f7       	brne	.-20     	; 0x63e <LCDWriteInt+0x52>
		str[i]=val%10;
		val=val/10;
		i--;
	}
	
	if(field_length==-1)
 652:	bf ef       	ldi	r27, 0xFF	; 255
 654:	fb 12       	cpse	r15, r27
 656:	0d c0       	rjmp	.+26     	; 0x672 <LCDWriteInt+0x86>
		while(str[j]==0) j++;
 658:	89 81       	ldd	r24, Y+1	; 0x01
 65a:	81 11       	cpse	r24, r1
 65c:	14 c0       	rjmp	.+40     	; 0x686 <LCDWriteInt+0x9a>
 65e:	fe 01       	movw	r30, r28
 660:	32 96       	adiw	r30, 0x02	; 2
 662:	00 e0       	ldi	r16, 0x00	; 0
 664:	10 e0       	ldi	r17, 0x00	; 0
 666:	0f 5f       	subi	r16, 0xFF	; 255
 668:	1f 4f       	sbci	r17, 0xFF	; 255
 66a:	81 91       	ld	r24, Z+
 66c:	88 23       	and	r24, r24
 66e:	d9 f3       	breq	.-10     	; 0x666 <LCDWriteInt+0x7a>
 670:	06 c0       	rjmp	.+12     	; 0x67e <LCDWriteInt+0x92>
	else
		j=5-field_length;
 672:	05 e0       	ldi	r16, 0x05	; 5
 674:	10 e0       	ldi	r17, 0x00	; 0
 676:	0f 19       	sub	r16, r15
 678:	11 09       	sbc	r17, r1
 67a:	f7 fc       	sbrc	r15, 7
 67c:	13 95       	inc	r17

	for(i=j;i<5;i++)
 67e:	05 30       	cpi	r16, 0x05	; 5
 680:	11 05       	cpc	r17, r1
 682:	1c f0       	brlt	.+6      	; 0x68a <LCDWriteInt+0x9e>
 684:	15 c0       	rjmp	.+42     	; 0x6b0 <LCDWriteInt+0xc4>
		val=val/10;
		i--;
	}
	
	if(field_length==-1)
		while(str[j]==0) j++;
 686:	00 e0       	ldi	r16, 0x00	; 0
 688:	10 e0       	ldi	r17, 0x00	; 0
 68a:	ee 24       	eor	r14, r14
 68c:	e3 94       	inc	r14
 68e:	f1 2c       	mov	r15, r1
 690:	ec 0e       	add	r14, r28
 692:	fd 1e       	adc	r15, r29
 694:	e0 0e       	add	r14, r16
 696:	f1 1e       	adc	r15, r17
	else
		j=5-field_length;

	for(i=j;i<5;i++)
	{
		LCDData('0'+str[i]);
 698:	f7 01       	movw	r30, r14
 69a:	81 91       	ld	r24, Z+
 69c:	7f 01       	movw	r14, r30
 69e:	61 e0       	ldi	r22, 0x01	; 1
 6a0:	80 5d       	subi	r24, 0xD0	; 208
 6a2:	0e 94 41 02 	call	0x482	; 0x482 <LCDByte>
	if(field_length==-1)
		while(str[j]==0) j++;
	else
		j=5-field_length;

	for(i=j;i<5;i++)
 6a6:	0f 5f       	subi	r16, 0xFF	; 255
 6a8:	1f 4f       	sbci	r17, 0xFF	; 255
 6aa:	05 30       	cpi	r16, 0x05	; 5
 6ac:	11 05       	cpc	r17, r1
 6ae:	a4 f3       	brlt	.-24     	; 0x698 <LCDWriteInt+0xac>
	{
		LCDData('0'+str[i]);
	}
}
 6b0:	0f 90       	pop	r0
 6b2:	0f 90       	pop	r0
 6b4:	0f 90       	pop	r0
 6b6:	0f 90       	pop	r0
 6b8:	0f 90       	pop	r0
 6ba:	df 91       	pop	r29
 6bc:	cf 91       	pop	r28
 6be:	1f 91       	pop	r17
 6c0:	0f 91       	pop	r16
 6c2:	ff 90       	pop	r15
 6c4:	ef 90       	pop	r14
 6c6:	08 95       	ret

000006c8 <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 	if(x>=20) return;
 6c8:	84 31       	cpi	r24, 0x14	; 20
 6ca:	78 f4       	brcc	.+30     	; 0x6ea <LCDGotoXY+0x22>

	#ifdef LCD_TYPE_204
	
	switch(y)
 6cc:	62 30       	cpi	r22, 0x02	; 2
 6ce:	31 f0       	breq	.+12     	; 0x6dc <LCDGotoXY+0x14>
 6d0:	63 30       	cpi	r22, 0x03	; 3
 6d2:	31 f0       	breq	.+12     	; 0x6e0 <LCDGotoXY+0x18>
 6d4:	61 30       	cpi	r22, 0x01	; 1
 6d6:	29 f4       	brne	.+10     	; 0x6e2 <LCDGotoXY+0x1a>
	{
		case 0:
			break;
		case 1:
			x|=0b01000000;
 6d8:	80 64       	ori	r24, 0x40	; 64
			break;
 6da:	03 c0       	rjmp	.+6      	; 0x6e2 <LCDGotoXY+0x1a>
		case 2:
			x+=0x14;
 6dc:	8c 5e       	subi	r24, 0xEC	; 236
			break;
 6de:	01 c0       	rjmp	.+2      	; 0x6e2 <LCDGotoXY+0x1a>
		case 3:
			x+=0x54;
 6e0:	8c 5a       	subi	r24, 0xAC	; 172
	}

	#endif

	x|=0b10000000;
  	LCDCmd(x);
 6e2:	60 e0       	ldi	r22, 0x00	; 0
 6e4:	80 68       	ori	r24, 0x80	; 128
 6e6:	0e 94 41 02 	call	0x482	; 0x482 <LCDByte>
 6ea:	08 95       	ret

000006ec <TIMER0_VidInit>:
	OCR0 = Duty;
}

void TIMER0_VoidSetCallBack(void (*Ptr0)(void))
{
	TIMER0_PVidCallBack = Ptr0;
 6ec:	83 b7       	in	r24, 0x33	; 51
 6ee:	88 60       	ori	r24, 0x08	; 8
 6f0:	83 bf       	out	0x33, r24	; 51
 6f2:	83 b7       	in	r24, 0x33	; 51
 6f4:	80 64       	ori	r24, 0x40	; 64
 6f6:	83 bf       	out	0x33, r24	; 51
 6f8:	83 b7       	in	r24, 0x33	; 51
 6fa:	8f 7e       	andi	r24, 0xEF	; 239
 6fc:	83 bf       	out	0x33, r24	; 51
 6fe:	83 b7       	in	r24, 0x33	; 51
 700:	80 62       	ori	r24, 0x20	; 32
 702:	83 bf       	out	0x33, r24	; 51
 704:	83 b7       	in	r24, 0x33	; 51
 706:	81 60       	ori	r24, 0x01	; 1
 708:	83 bf       	out	0x33, r24	; 51
 70a:	83 b7       	in	r24, 0x33	; 51
 70c:	8d 7f       	andi	r24, 0xFD	; 253
 70e:	83 bf       	out	0x33, r24	; 51
 710:	83 b7       	in	r24, 0x33	; 51
 712:	84 60       	ori	r24, 0x04	; 4
 714:	83 bf       	out	0x33, r24	; 51
 716:	08 95       	ret

00000718 <__vector_11>:




void __vector_11(void)
{
 718:	1f 92       	push	r1
 71a:	0f 92       	push	r0
 71c:	0f b6       	in	r0, 0x3f	; 63
 71e:	0f 92       	push	r0
 720:	11 24       	eor	r1, r1
 722:	2f 93       	push	r18
 724:	3f 93       	push	r19
 726:	4f 93       	push	r20
 728:	5f 93       	push	r21
 72a:	6f 93       	push	r22
 72c:	7f 93       	push	r23
 72e:	8f 93       	push	r24
 730:	9f 93       	push	r25
 732:	af 93       	push	r26
 734:	bf 93       	push	r27
 736:	ef 93       	push	r30
 738:	ff 93       	push	r31
	if(TIMER0_PVidCallBack != NULL)
 73a:	e0 91 cb 00 	lds	r30, 0x00CB	; 0x8000cb <TIMER0_PVidCallBack>
 73e:	f0 91 cc 00 	lds	r31, 0x00CC	; 0x8000cc <TIMER0_PVidCallBack+0x1>
 742:	30 97       	sbiw	r30, 0x00	; 0
 744:	61 f0       	breq	.+24     	; 0x75e <__vector_11+0x46>
	{
		static u8 counter = 0;
		counter ++;
 746:	80 91 ca 00 	lds	r24, 0x00CA	; 0x8000ca <counter.1594>
 74a:	8f 5f       	subi	r24, 0xFF	; 255
 74c:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <counter.1594>
		if(counter == 31) //counter for 1 second
 750:	8f 31       	cpi	r24, 0x1F	; 31
 752:	29 f4       	brne	.+10     	; 0x75e <__vector_11+0x46>
		{
			//DIO_VidSetPinDirection(PORTA,0,OUTPUT);
			//DIO_ToggelPin(PORTA,0);
			TIMER0_PVidCallBack();
 754:	09 95       	icall
			counter = 0;
 756:	10 92 ca 00 	sts	0x00CA, r1	; 0x8000ca <counter.1594>
			TCNT0 = 133;
 75a:	85 e8       	ldi	r24, 0x85	; 133
 75c:	82 bf       	out	0x32, r24	; 50
		}
	}
}
 75e:	ff 91       	pop	r31
 760:	ef 91       	pop	r30
 762:	bf 91       	pop	r27
 764:	af 91       	pop	r26
 766:	9f 91       	pop	r25
 768:	8f 91       	pop	r24
 76a:	7f 91       	pop	r23
 76c:	6f 91       	pop	r22
 76e:	5f 91       	pop	r21
 770:	4f 91       	pop	r20
 772:	3f 91       	pop	r19
 774:	2f 91       	pop	r18
 776:	0f 90       	pop	r0
 778:	0f be       	out	0x3f, r0	; 63
 77a:	0f 90       	pop	r0
 77c:	1f 90       	pop	r1
 77e:	18 95       	reti

00000780 <TIMER1_VoidInit>:


void TIMER1_VoidInit(void)
{
	//Golbal Intrrupt
	SET_BIT(SREG,GIE);
 780:	8f b7       	in	r24, 0x3f	; 63
 782:	80 68       	ori	r24, 0x80	; 128
 784:	8f bf       	out	0x3f, r24	; 63
	#if TIMER1 == Normal	
		CLR_BIT(TCCR1,COM1B0);
 786:	8e b5       	in	r24, 0x2e	; 46
 788:	9f b5       	in	r25, 0x2f	; 47
 78a:	9f 7e       	andi	r25, 0xEF	; 239
 78c:	9f bd       	out	0x2f, r25	; 47
 78e:	8e bd       	out	0x2e, r24	; 46
		CLR_BIT(TCCR1,COM1B1);
 790:	8e b5       	in	r24, 0x2e	; 46
 792:	9f b5       	in	r25, 0x2f	; 47
 794:	9f 7d       	andi	r25, 0xDF	; 223
 796:	9f bd       	out	0x2f, r25	; 47
 798:	8e bd       	out	0x2e, r24	; 46
		CLR_BIT(TCCR1,COM1A0);
 79a:	8e b5       	in	r24, 0x2e	; 46
 79c:	9f b5       	in	r25, 0x2f	; 47
 79e:	9f 7b       	andi	r25, 0xBF	; 191
 7a0:	9f bd       	out	0x2f, r25	; 47
 7a2:	8e bd       	out	0x2e, r24	; 46
		CLR_BIT(TCCR1,COM1A1);
 7a4:	8e b5       	in	r24, 0x2e	; 46
 7a6:	9f b5       	in	r25, 0x2f	; 47
 7a8:	9f 77       	andi	r25, 0x7F	; 127
 7aa:	9f bd       	out	0x2f, r25	; 47
 7ac:	8e bd       	out	0x2e, r24	; 46
		#if WaveForm == CTC
			CLR_BIT(TCCR1,WGM10);
 7ae:	8e b5       	in	r24, 0x2e	; 46
 7b0:	9f b5       	in	r25, 0x2f	; 47
 7b2:	9e 7f       	andi	r25, 0xFE	; 254
 7b4:	9f bd       	out	0x2f, r25	; 47
 7b6:	8e bd       	out	0x2e, r24	; 46
			CLR_BIT(TCCR1,WGM11);
 7b8:	8e b5       	in	r24, 0x2e	; 46
 7ba:	9f b5       	in	r25, 0x2f	; 47
 7bc:	9d 7f       	andi	r25, 0xFD	; 253
 7be:	9f bd       	out	0x2f, r25	; 47
 7c0:	8e bd       	out	0x2e, r24	; 46
			SET_BIT(TCCR1,WGM12);
 7c2:	8e b5       	in	r24, 0x2e	; 46
 7c4:	9f b5       	in	r25, 0x2f	; 47
 7c6:	88 60       	ori	r24, 0x08	; 8
 7c8:	9f bd       	out	0x2f, r25	; 47
 7ca:	8e bd       	out	0x2e, r24	; 46
			CLR_BIT(TCCR1,WGM13);
 7cc:	8e b5       	in	r24, 0x2e	; 46
 7ce:	9f b5       	in	r25, 0x2f	; 47
 7d0:	8f 7e       	andi	r24, 0xEF	; 239
 7d2:	9f bd       	out	0x2f, r25	; 47
 7d4:	8e bd       	out	0x2e, r24	; 46
			//TOP
			OCR1A = 62500;
 7d6:	84 e2       	ldi	r24, 0x24	; 36
 7d8:	94 ef       	ldi	r25, 0xF4	; 244
 7da:	9b bd       	out	0x2b, r25	; 43
 7dc:	8a bd       	out	0x2a, r24	; 42
			//Enable Interrupt
			CLR_BIT(TIMSK,TOIE1);
 7de:	89 b7       	in	r24, 0x39	; 57
 7e0:	8b 7f       	andi	r24, 0xFB	; 251
 7e2:	89 bf       	out	0x39, r24	; 57
			CLR_BIT(TIMSK,OCIE1B);
 7e4:	89 b7       	in	r24, 0x39	; 57
 7e6:	87 7f       	andi	r24, 0xF7	; 247
 7e8:	89 bf       	out	0x39, r24	; 57
			SET_BIT(TIMSK,OCIE1A);
 7ea:	89 b7       	in	r24, 0x39	; 57
 7ec:	80 61       	ori	r24, 0x10	; 16
 7ee:	89 bf       	out	0x39, r24	; 57
			CLR_BIT(TIMSK,TICIE1);
 7f0:	89 b7       	in	r24, 0x39	; 57
 7f2:	8f 7d       	andi	r24, 0xDF	; 223
 7f4:	89 bf       	out	0x39, r24	; 57
			
		#endif
			//Set Prescaler to 256
			CLR_BIT(TCCR1,CS10);
 7f6:	8e b5       	in	r24, 0x2e	; 46
 7f8:	9f b5       	in	r25, 0x2f	; 47
 7fa:	8e 7f       	andi	r24, 0xFE	; 254
 7fc:	9f bd       	out	0x2f, r25	; 47
 7fe:	8e bd       	out	0x2e, r24	; 46
			CLR_BIT(TCCR1,CS11);
 800:	8e b5       	in	r24, 0x2e	; 46
 802:	9f b5       	in	r25, 0x2f	; 47
 804:	8d 7f       	andi	r24, 0xFD	; 253
 806:	9f bd       	out	0x2f, r25	; 47
 808:	8e bd       	out	0x2e, r24	; 46
			SET_BIT(TCCR1,CS12);
 80a:	8e b5       	in	r24, 0x2e	; 46
 80c:	9f b5       	in	r25, 0x2f	; 47
 80e:	84 60       	ori	r24, 0x04	; 4
 810:	9f bd       	out	0x2f, r25	; 47
 812:	8e bd       	out	0x2e, r24	; 46
 814:	08 95       	ret

00000816 <TIMER1_VoidSetCallBack>:
}


void TIMER1_VoidSetCallBack(void (*Ptr1)(void))
{
	TIMER1_PVidCallBack = Ptr1;
 816:	90 93 cf 00 	sts	0x00CF, r25	; 0x8000cf <TIMER1_PVidCallBack+0x1>
 81a:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <TIMER1_PVidCallBack>
 81e:	08 95       	ret

00000820 <__vector_7>:




void __vector_7(void)
{
 820:	1f 92       	push	r1
 822:	0f 92       	push	r0
 824:	0f b6       	in	r0, 0x3f	; 63
 826:	0f 92       	push	r0
 828:	11 24       	eor	r1, r1
 82a:	2f 93       	push	r18
 82c:	3f 93       	push	r19
 82e:	4f 93       	push	r20
 830:	5f 93       	push	r21
 832:	6f 93       	push	r22
 834:	7f 93       	push	r23
 836:	8f 93       	push	r24
 838:	9f 93       	push	r25
 83a:	af 93       	push	r26
 83c:	bf 93       	push	r27
 83e:	ef 93       	push	r30
 840:	ff 93       	push	r31
	if(TIMER1_PVidCallBack != NULL)
 842:	e0 91 ce 00 	lds	r30, 0x00CE	; 0x8000ce <TIMER1_PVidCallBack>
 846:	f0 91 cf 00 	lds	r31, 0x00CF	; 0x8000cf <TIMER1_PVidCallBack+0x1>
 84a:	30 97       	sbiw	r30, 0x00	; 0
 84c:	51 f0       	breq	.+20     	; 0x862 <__stack+0x3>
	{

		static u8 counter = 0;
		counter ++;
 84e:	80 91 cd 00 	lds	r24, 0x00CD	; 0x8000cd <counter.1591>
 852:	8f 5f       	subi	r24, 0xFF	; 255
 854:	80 93 cd 00 	sts	0x00CD, r24	; 0x8000cd <counter.1591>
		if(counter == 1) //counter for 3 second
 858:	81 30       	cpi	r24, 0x01	; 1
 85a:	19 f4       	brne	.+6      	; 0x862 <__stack+0x3>
		{
			//DIO_VidSetPinDirection(PORTA,0,OUTPUT);
			//DIO_ToggelPin(PORTA,0);
			TIMER1_PVidCallBack();
 85c:	09 95       	icall
			counter = 0;
 85e:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <counter.1591>
			
		}
	}
}
 862:	ff 91       	pop	r31
 864:	ef 91       	pop	r30
 866:	bf 91       	pop	r27
 868:	af 91       	pop	r26
 86a:	9f 91       	pop	r25
 86c:	8f 91       	pop	r24
 86e:	7f 91       	pop	r23
 870:	6f 91       	pop	r22
 872:	5f 91       	pop	r21
 874:	4f 91       	pop	r20
 876:	3f 91       	pop	r19
 878:	2f 91       	pop	r18
 87a:	0f 90       	pop	r0
 87c:	0f be       	out	0x3f, r0	; 63
 87e:	0f 90       	pop	r0
 880:	1f 90       	pop	r1
 882:	18 95       	reti

00000884 <CountUP>:
	LCDClear();
	LCDWriteStringXY(0,First_Line,"Tempe:");
	LCDWriteInt(5,2);

	LCDWriteStringXY(0,Second_Line,"Humidity:");
	LCDWriteInt(89,2);
 884:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <FoodCounter>
 888:	90 91 db 00 	lds	r25, 0x00DB	; 0x8000db <FoodCounter+0x1>
 88c:	a0 91 dc 00 	lds	r26, 0x00DC	; 0x8000dc <FoodCounter+0x2>
 890:	b0 91 dd 00 	lds	r27, 0x00DD	; 0x8000dd <FoodCounter+0x3>
 894:	01 96       	adiw	r24, 0x01	; 1
 896:	a1 1d       	adc	r26, r1
 898:	b1 1d       	adc	r27, r1
 89a:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <FoodCounter>
 89e:	90 93 db 00 	sts	0x00DB, r25	; 0x8000db <FoodCounter+0x1>
 8a2:	a0 93 dc 00 	sts	0x00DC, r26	; 0x8000dc <FoodCounter+0x2>
 8a6:	b0 93 dd 00 	sts	0x00DD, r27	; 0x8000dd <FoodCounter+0x3>
 8aa:	62 e0       	ldi	r22, 0x02	; 2
 8ac:	0e 94 f6 02 	call	0x5ec	; 0x5ec <LCDWriteInt>
 8b0:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <WaterCounter>
 8b4:	90 91 d7 00 	lds	r25, 0x00D7	; 0x8000d7 <WaterCounter+0x1>
 8b8:	a0 91 d8 00 	lds	r26, 0x00D8	; 0x8000d8 <WaterCounter+0x2>
 8bc:	b0 91 d9 00 	lds	r27, 0x00D9	; 0x8000d9 <WaterCounter+0x3>
 8c0:	01 96       	adiw	r24, 0x01	; 1
 8c2:	a1 1d       	adc	r26, r1
 8c4:	b1 1d       	adc	r27, r1
 8c6:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <WaterCounter>
 8ca:	90 93 d7 00 	sts	0x00D7, r25	; 0x8000d7 <WaterCounter+0x1>
 8ce:	a0 93 d8 00 	sts	0x00D8, r26	; 0x8000d8 <WaterCounter+0x2>
 8d2:	b0 93 d9 00 	sts	0x00D9, r27	; 0x8000d9 <WaterCounter+0x3>
 8d6:	80 91 d2 00 	lds	r24, 0x00D2	; 0x8000d2 <CleanCounter>
 8da:	90 91 d3 00 	lds	r25, 0x00D3	; 0x8000d3 <CleanCounter+0x1>
 8de:	a0 91 d4 00 	lds	r26, 0x00D4	; 0x8000d4 <CleanCounter+0x2>
 8e2:	b0 91 d5 00 	lds	r27, 0x00D5	; 0x8000d5 <CleanCounter+0x3>
 8e6:	01 96       	adiw	r24, 0x01	; 1
 8e8:	a1 1d       	adc	r26, r1
 8ea:	b1 1d       	adc	r27, r1
 8ec:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <CleanCounter>
 8f0:	90 93 d3 00 	sts	0x00D3, r25	; 0x8000d3 <CleanCounter+0x1>
 8f4:	a0 93 d4 00 	sts	0x00D4, r26	; 0x8000d4 <CleanCounter+0x2>
 8f8:	b0 93 d5 00 	sts	0x00D5, r27	; 0x8000d5 <CleanCounter+0x3>
 8fc:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <TempCounter>
 900:	90 91 d1 00 	lds	r25, 0x00D1	; 0x8000d1 <TempCounter+0x1>
 904:	01 96       	adiw	r24, 0x01	; 1
 906:	90 93 d1 00 	sts	0x00D1, r25	; 0x8000d1 <TempCounter+0x1>
 90a:	80 93 d0 00 	sts	0x00D0, r24	; 0x8000d0 <TempCounter>
 90e:	08 95       	ret

00000910 <Feeder>:
 910:	41 e0       	ldi	r20, 0x01	; 1
 912:	60 e0       	ldi	r22, 0x00	; 0
 914:	82 e0       	ldi	r24, 0x02	; 2
 916:	0e 94 49 00 	call	0x92	; 0x92 <DIO_VidSetPinDirection>
 91a:	41 e0       	ldi	r20, 0x01	; 1
 91c:	60 e0       	ldi	r22, 0x00	; 0
 91e:	82 e0       	ldi	r24, 0x02	; 2
 920:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_VidSetPinValue>
 924:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <FoodCounter>
 928:	10 92 db 00 	sts	0x00DB, r1	; 0x8000db <FoodCounter+0x1>
 92c:	10 92 dc 00 	sts	0x00DC, r1	; 0x8000dc <FoodCounter+0x2>
 930:	10 92 dd 00 	sts	0x00DD, r1	; 0x8000dd <FoodCounter+0x3>
 934:	08 95       	ret

00000936 <Clean>:
 936:	41 e0       	ldi	r20, 0x01	; 1
 938:	60 e0       	ldi	r22, 0x00	; 0
 93a:	83 e0       	ldi	r24, 0x03	; 3
 93c:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_VidSetPinValue>
 940:	2f ef       	ldi	r18, 0xFF	; 255
 942:	8b e7       	ldi	r24, 0x7B	; 123
 944:	92 e9       	ldi	r25, 0x92	; 146
 946:	21 50       	subi	r18, 0x01	; 1
 948:	80 40       	sbci	r24, 0x00	; 0
 94a:	90 40       	sbci	r25, 0x00	; 0
 94c:	e1 f7       	brne	.-8      	; 0x946 <Clean+0x10>
 94e:	00 c0       	rjmp	.+0      	; 0x950 <Clean+0x1a>
 950:	00 00       	nop
 952:	40 e0       	ldi	r20, 0x00	; 0
 954:	60 e0       	ldi	r22, 0x00	; 0
 956:	83 e0       	ldi	r24, 0x03	; 3
 958:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_VidSetPinValue>
 95c:	2f ef       	ldi	r18, 0xFF	; 255
 95e:	81 ee       	ldi	r24, 0xE1	; 225
 960:	94 e0       	ldi	r25, 0x04	; 4
 962:	21 50       	subi	r18, 0x01	; 1
 964:	80 40       	sbci	r24, 0x00	; 0
 966:	90 40       	sbci	r25, 0x00	; 0
 968:	e1 f7       	brne	.-8      	; 0x962 <Clean+0x2c>
 96a:	00 c0       	rjmp	.+0      	; 0x96c <Clean+0x36>
 96c:	00 00       	nop
 96e:	08 95       	ret

00000970 <Water>:
 970:	66 e0       	ldi	r22, 0x06	; 6
 972:	81 e0       	ldi	r24, 0x01	; 1
 974:	0e 94 29 01 	call	0x252	; 0x252 <DIO_u8GetPinValue>
 978:	88 23       	and	r24, r24
 97a:	b1 f0       	breq	.+44     	; 0x9a8 <Water+0x38>
 97c:	67 e0       	ldi	r22, 0x07	; 7
 97e:	81 e0       	ldi	r24, 0x01	; 1
 980:	0e 94 29 01 	call	0x252	; 0x252 <DIO_u8GetPinValue>
 984:	88 23       	and	r24, r24
 986:	81 f0       	breq	.+32     	; 0x9a8 <Water+0x38>
 988:	41 e0       	ldi	r20, 0x01	; 1
 98a:	64 e0       	ldi	r22, 0x04	; 4
 98c:	82 e0       	ldi	r24, 0x02	; 2
 98e:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_VidSetPinValue>
 992:	67 e0       	ldi	r22, 0x07	; 7
 994:	81 e0       	ldi	r24, 0x01	; 1
 996:	0e 94 29 01 	call	0x252	; 0x252 <DIO_u8GetPinValue>
 99a:	88 23       	and	r24, r24
 99c:	d1 f3       	breq	.-12     	; 0x992 <Water+0x22>
 99e:	40 e0       	ldi	r20, 0x00	; 0
 9a0:	64 e0       	ldi	r22, 0x04	; 4
 9a2:	82 e0       	ldi	r24, 0x02	; 2
 9a4:	0e 94 b9 00 	call	0x172	; 0x172 <DIO_VidSetPinValue>
 9a8:	2f ef       	ldi	r18, 0xFF	; 255
 9aa:	81 ee       	ldi	r24, 0xE1	; 225
 9ac:	94 e0       	ldi	r25, 0x04	; 4
 9ae:	21 50       	subi	r18, 0x01	; 1
 9b0:	80 40       	sbci	r24, 0x00	; 0
 9b2:	90 40       	sbci	r25, 0x00	; 0
 9b4:	e1 f7       	brne	.-8      	; 0x9ae <Water+0x3e>
 9b6:	00 c0       	rjmp	.+0      	; 0x9b8 <Water+0x48>
 9b8:	00 00       	nop
 9ba:	08 95       	ret

000009bc <LCD_Print_Welcome_msg>:
}


void LCD_Print_Welcome_msg (){
	
	LCDWriteStringXY(5,First_Line,"Welcome")
 9bc:	60 e0       	ldi	r22, 0x00	; 0
 9be:	85 e0       	ldi	r24, 0x05	; 5
 9c0:	0e 94 64 03 	call	0x6c8	; 0x6c8 <LCDGotoXY>
 9c4:	81 eb       	ldi	r24, 0xB1	; 177
 9c6:	90 e0       	ldi	r25, 0x00	; 0
 9c8:	0e 94 c7 02 	call	0x58e	; 0x58e <LCDWriteString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 9cc:	2f ef       	ldi	r18, 0xFF	; 255
 9ce:	89 e6       	ldi	r24, 0x69	; 105
 9d0:	98 e1       	ldi	r25, 0x18	; 24
 9d2:	21 50       	subi	r18, 0x01	; 1
 9d4:	80 40       	sbci	r24, 0x00	; 0
 9d6:	90 40       	sbci	r25, 0x00	; 0
 9d8:	e1 f7       	brne	.-8      	; 0x9d2 <LCD_Print_Welcome_msg+0x16>
 9da:	00 c0       	rjmp	.+0      	; 0x9dc <LCD_Print_Welcome_msg+0x20>
 9dc:	00 00       	nop
	_delay_ms(500);
	LCDWriteStringXY(4,Second_Line,"SmartCage")
 9de:	61 e0       	ldi	r22, 0x01	; 1
 9e0:	84 e0       	ldi	r24, 0x04	; 4
 9e2:	0e 94 64 03 	call	0x6c8	; 0x6c8 <LCDGotoXY>
 9e6:	89 eb       	ldi	r24, 0xB9	; 185
 9e8:	90 e0       	ldi	r25, 0x00	; 0
 9ea:	0e 94 c7 02 	call	0x58e	; 0x58e <LCDWriteString>
 9ee:	2f ef       	ldi	r18, 0xFF	; 255
 9f0:	83 ed       	ldi	r24, 0xD3	; 211
 9f2:	90 e3       	ldi	r25, 0x30	; 48
 9f4:	21 50       	subi	r18, 0x01	; 1
 9f6:	80 40       	sbci	r24, 0x00	; 0
 9f8:	90 40       	sbci	r25, 0x00	; 0
 9fa:	e1 f7       	brne	.-8      	; 0x9f4 <LCD_Print_Welcome_msg+0x38>
 9fc:	00 c0       	rjmp	.+0      	; 0x9fe <LCD_Print_Welcome_msg+0x42>
 9fe:	00 00       	nop
	_delay_ms(1000);
	LCDClear();
 a00:	60 e0       	ldi	r22, 0x00	; 0
 a02:	81 e0       	ldi	r24, 0x01	; 1
 a04:	0e 94 41 02 	call	0x482	; 0x482 <LCDByte>
 a08:	08 95       	ret

00000a0a <CheckFood>:
	TempCounter++;
}

void CheckFood(void)
{
	if(FoodCounter == 10)
 a0a:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <FoodCounter>
 a0e:	90 91 db 00 	lds	r25, 0x00DB	; 0x8000db <FoodCounter+0x1>
 a12:	a0 91 dc 00 	lds	r26, 0x00DC	; 0x8000dc <FoodCounter+0x2>
 a16:	b0 91 dd 00 	lds	r27, 0x00DD	; 0x8000dd <FoodCounter+0x3>
 a1a:	0a 97       	sbiw	r24, 0x0a	; 10
 a1c:	a1 05       	cpc	r26, r1
 a1e:	b1 05       	cpc	r27, r1
 a20:	51 f4       	brne	.+20     	; 0xa36 <CheckFood+0x2c>
	{
		Feeder();
 a22:	0e 94 88 04 	call	0x910	; 0x910 <Feeder>
		FoodCounter=0;
 a26:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <FoodCounter>
 a2a:	10 92 db 00 	sts	0x00DB, r1	; 0x8000db <FoodCounter+0x1>
 a2e:	10 92 dc 00 	sts	0x00DC, r1	; 0x8000dc <FoodCounter+0x2>
 a32:	10 92 dd 00 	sts	0x00DD, r1	; 0x8000dd <FoodCounter+0x3>
 a36:	08 95       	ret

00000a38 <main>:
int main(void)
{
	
	//INPUTS
	
	DIO_VidSetPinDirection(INT0Button_PORT,INT0Button_PIN,INPUT);//INT0	Feeder
 a38:	40 e0       	ldi	r20, 0x00	; 0
 a3a:	62 e0       	ldi	r22, 0x02	; 2
 a3c:	83 e0       	ldi	r24, 0x03	; 3
 a3e:	0e 94 49 00 	call	0x92	; 0x92 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(INT1Button_PORT,INT1Button_PIN,INPUT);//INT1	Water
 a42:	40 e0       	ldi	r20, 0x00	; 0
 a44:	63 e0       	ldi	r22, 0x03	; 3
 a46:	83 e0       	ldi	r24, 0x03	; 3
 a48:	0e 94 49 00 	call	0x92	; 0x92 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(INT2Button_PORT,INT2Button_PIN,INPUT);//INT2	Cleaning
 a4c:	40 e0       	ldi	r20, 0x00	; 0
 a4e:	62 e0       	ldi	r22, 0x02	; 2
 a50:	81 e0       	ldi	r24, 0x01	; 1
 a52:	0e 94 49 00 	call	0x92	; 0x92 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(TempButton_PORT,TempButton_Pin,INPUT);//Push button	Temp
 a56:	40 e0       	ldi	r20, 0x00	; 0
 a58:	65 e0       	ldi	r22, 0x05	; 5
 a5a:	81 e0       	ldi	r24, 0x01	; 1
 a5c:	0e 94 49 00 	call	0x92	; 0x92 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(WaterSensor1_PORT,WaterSensor1_PIN,INPUT); //Water Sensor 1
 a60:	40 e0       	ldi	r20, 0x00	; 0
 a62:	66 e0       	ldi	r22, 0x06	; 6
 a64:	81 e0       	ldi	r24, 0x01	; 1
 a66:	0e 94 49 00 	call	0x92	; 0x92 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(WaterSensor2_PORT,WaterSensor2_PIN,INPUT); //Water Sensor 2
 a6a:	40 e0       	ldi	r20, 0x00	; 0
 a6c:	67 e0       	ldi	r22, 0x07	; 7
 a6e:	81 e0       	ldi	r24, 0x01	; 1
 a70:	0e 94 49 00 	call	0x92	; 0x92 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(LimitSwitch_PORT,LimitSwitch_PIN,INPUT); //Feeder Limit Switch
 a74:	40 e0       	ldi	r20, 0x00	; 0
 a76:	60 e0       	ldi	r22, 0x00	; 0
 a78:	81 e0       	ldi	r24, 0x01	; 1
 a7a:	0e 94 49 00 	call	0x92	; 0x92 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(CurtainUp_PORT, CurtainUp_PIN, OUTPUT); //Curtain Up
	DIO_VidSetPinDirection(CurtainDn_PORT, CurtainDn_PIN, OUTPUT); //Curtain Dn*/
	
	
	//Driver Initialization
	TIMER0_VidInit();
 a7e:	0e 94 76 03 	call	0x6ec	; 0x6ec <TIMER0_VidInit>
	TIMER1_VoidInit();
 a82:	0e 94 c0 03 	call	0x780	; 0x780 <TIMER1_VoidInit>
	TIMER1_VoidSetCallBack(&CountUP);
 a86:	82 e4       	ldi	r24, 0x42	; 66
 a88:	94 e0       	ldi	r25, 0x04	; 4
 a8a:	0e 94 0b 04 	call	0x816	; 0x816 <TIMER1_VoidSetCallBack>
	EXIT0_VidInit();
 a8e:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <EXIT0_VidInit>
	EXIT1_VidInit();
 a92:	0e 94 67 01 	call	0x2ce	; 0x2ce <EXIT1_VidInit>
	EXIT2_VidInit();
 a96:	0e 94 74 01 	call	0x2e8	; 0x2e8 <EXIT2_VidInit>
	EXIT0_VoidSetCallBack(&Feeder);
 a9a:	88 e8       	ldi	r24, 0x88	; 136
 a9c:	94 e0       	ldi	r25, 0x04	; 4
 a9e:	0e 94 81 01 	call	0x302	; 0x302 <EXIT0_VoidSetCallBack>
	EXIT1_VoidSetCallBack(&Water);
 aa2:	88 eb       	ldi	r24, 0xB8	; 184
 aa4:	94 e0       	ldi	r25, 0x04	; 4
 aa6:	0e 94 86 01 	call	0x30c	; 0x30c <EXIT1_VoidSetCallBack>
	EXIT2_VoidSetCallBack(&Clean);
 aaa:	8b e9       	ldi	r24, 0x9B	; 155
 aac:	94 e0       	ldi	r25, 0x04	; 4
 aae:	0e 94 8b 01 	call	0x316	; 0x316 <EXIT2_VoidSetCallBack>
	
	
	LCDInit(LS_NONE);
 ab2:	80 e0       	ldi	r24, 0x00	; 0
 ab4:	0e 94 73 02 	call	0x4e6	; 0x4e6 <LCDInit>
	LCDClear();
 ab8:	60 e0       	ldi	r22, 0x00	; 0
 aba:	81 e0       	ldi	r24, 0x01	; 1
 abc:	0e 94 41 02 	call	0x482	; 0x482 <LCDByte>
	LCD_Print_Welcome_msg ();
 ac0:	0e 94 de 04 	call	0x9bc	; 0x9bc <LCD_Print_Welcome_msg>
 ac4:	2f ef       	ldi	r18, 0xFF	; 255
 ac6:	89 e6       	ldi	r24, 0x69	; 105
 ac8:	98 e1       	ldi	r25, 0x18	; 24
 aca:	21 50       	subi	r18, 0x01	; 1
 acc:	80 40       	sbci	r24, 0x00	; 0
 ace:	90 40       	sbci	r25, 0x00	; 0
 ad0:	e1 f7       	brne	.-8      	; 0xaca <main+0x92>
 ad2:	00 c0       	rjmp	.+0      	; 0xad4 <main+0x9c>
 ad4:	00 00       	nop
		
		
	
		//DHT11_GetValues();
		
		CheckFood();
 ad6:	0e 94 05 05 	call	0xa0a	; 0xa0a <CheckFood>
 ada:	fd cf       	rjmp	.-6      	; 0xad6 <main+0x9e>

00000adc <__divmodhi4>:
 adc:	97 fb       	bst	r25, 7
 ade:	07 2e       	mov	r0, r23
 ae0:	16 f4       	brtc	.+4      	; 0xae6 <__divmodhi4+0xa>
 ae2:	00 94       	com	r0
 ae4:	07 d0       	rcall	.+14     	; 0xaf4 <__divmodhi4_neg1>
 ae6:	77 fd       	sbrc	r23, 7
 ae8:	09 d0       	rcall	.+18     	; 0xafc <__divmodhi4_neg2>
 aea:	0e 94 82 05 	call	0xb04	; 0xb04 <__udivmodhi4>
 aee:	07 fc       	sbrc	r0, 7
 af0:	05 d0       	rcall	.+10     	; 0xafc <__divmodhi4_neg2>
 af2:	3e f4       	brtc	.+14     	; 0xb02 <__divmodhi4_exit>

00000af4 <__divmodhi4_neg1>:
 af4:	90 95       	com	r25
 af6:	81 95       	neg	r24
 af8:	9f 4f       	sbci	r25, 0xFF	; 255
 afa:	08 95       	ret

00000afc <__divmodhi4_neg2>:
 afc:	70 95       	com	r23
 afe:	61 95       	neg	r22
 b00:	7f 4f       	sbci	r23, 0xFF	; 255

00000b02 <__divmodhi4_exit>:
 b02:	08 95       	ret

00000b04 <__udivmodhi4>:
 b04:	aa 1b       	sub	r26, r26
 b06:	bb 1b       	sub	r27, r27
 b08:	51 e1       	ldi	r21, 0x11	; 17
 b0a:	07 c0       	rjmp	.+14     	; 0xb1a <__udivmodhi4_ep>

00000b0c <__udivmodhi4_loop>:
 b0c:	aa 1f       	adc	r26, r26
 b0e:	bb 1f       	adc	r27, r27
 b10:	a6 17       	cp	r26, r22
 b12:	b7 07       	cpc	r27, r23
 b14:	10 f0       	brcs	.+4      	; 0xb1a <__udivmodhi4_ep>
 b16:	a6 1b       	sub	r26, r22
 b18:	b7 0b       	sbc	r27, r23

00000b1a <__udivmodhi4_ep>:
 b1a:	88 1f       	adc	r24, r24
 b1c:	99 1f       	adc	r25, r25
 b1e:	5a 95       	dec	r21
 b20:	a9 f7       	brne	.-22     	; 0xb0c <__udivmodhi4_loop>
 b22:	80 95       	com	r24
 b24:	90 95       	com	r25
 b26:	bc 01       	movw	r22, r24
 b28:	cd 01       	movw	r24, r26
 b2a:	08 95       	ret

00000b2c <_exit>:
 b2c:	f8 94       	cli

00000b2e <__stop_program>:
 b2e:	ff cf       	rjmp	.-2      	; 0xb2e <__stop_program>
